import { toast } from "sonner";
import { User } from "@/types";

// Zodiac signs in Arabic
const zodiacSigns = [
  "ุงูุญูู", "ุงูุซูุฑ", "ุงูุฌูุฒุงุก", "ุงูุณุฑุทุงู", 
  "ุงูุฃุณุฏ", "ุงูุนุฐุฑุงุก", "ุงูููุฒุงู", "ุงูุนูุฑุจ", 
  "ุงูููุณ", "ุงูุฌุฏู", "ุงูุฏูู", "ุงูุญูุช"
];

// Planet names in Arabic
const planetNames = {
  "Sun": "ุงูุดูุณ",
  "Moon": "ุงูููุฑ",
  "Mercury": "ุนุทุงุฑุฏ",
  "Venus": "ุงูุฒูุฑุฉ",
  "Mars": "ุงููุฑูุฎ",
  "Jupiter": "ุงููุดุชุฑู",
  "Saturn": "ุฒุญู",
  "Uranus": "ุฃูุฑุงููุณ",
  "Neptune": "ูุจุชูู",
  "Pluto": "ุจููุชู"
};

// House names in Arabic
const houseNames = [
  "ุงูุจูุช ุงูุฃูู", "ุงูุจูุช ุงูุซุงูู", "ุงูุจูุช ุงูุซุงูุซ", "ุงูุจูุช ุงูุฑุงุจุน",
  "ุงูุจูุช ุงูุฎุงูุณ", "ุงูุจูุช ุงูุณุงุฏุณ", "ุงูุจูุช ุงูุณุงุจุน", "ุงูุจูุช ุงูุซุงูู",
  "ุงูุจูุช ุงูุชุงุณุน", "ุงูุจูุช ุงูุนุงุดุฑ", "ุงูุจูุช ุงูุญุงุฏู ุนุดุฑ", "ุงูุจูุช ุงูุซุงูู ุนุดุฑ"
];

// Convert Date to Julian Day
const dateToJulianDay = (date: string, time: string = "12:00", timezone: string = "UTC"): number => {
  const d = new Date(`${date}T${time}:00Z`);
  
  const jd = 2440587.5 + d.getTime() / 86400000;
  console.log(`Converting ${date} ${time} to Julian Day: ${jd}`);
  return jd;
};

// Get timezone offset in hours from latitude/longitude
const getTimezoneFromLatLng = async (lat: number, lng: number): Promise<string> => {
  // In a real implementation, this would use a timezone API
  return "UTC";
};

// Seed-based random generator for deterministic results
const random = (seed: number): number => {
  const x = Math.sin(seed) * 10000;
  return x - Math.floor(x);
};

// Process city name to get latitude and longitude
const getCityCoordinates = (cityName: string): { lat: number, lon: number } => {
  // Basic mapping of some major cities
  const cities: Record<string, { lat: number, lon: number }> = {
    "ุงููุงูุฑุฉ": { lat: 30.0444, lon: 31.2357 },
    "ุงูุฑูุงุถ": { lat: 24.7136, lon: 46.6753 },
    "ุฏุจู": { lat: 25.2048, lon: 55.2708 },
    "ุจูุฑูุช": { lat: 33.8886, lon: 35.4955 },
    "ุนูุงู": { lat: 31.9454, lon: 35.9284 },
    "ุจุบุฏุงุฏ": { lat: 33.3152, lon: 44.3661 },
    "ุงูุฌุฒุงุฆุฑ": { lat: 36.7372, lon: 3.0865 },
    "ุงูุฏุงุฑ ุงูุจูุถุงุก": { lat: 33.5731, lon: -7.5898 },
    "ุชููุณ": { lat: 36.8065, lon: 10.1815 },
    "ุฏูุดู": { lat: 33.5138, lon: 36.2765 }
  };
  
  // Try to extract the city from the string (assuming format like "ุงููุงูุฑุฉุ ูุตุฑ")
  const cityPart = cityName.split('ุ')[0].trim();
  
  if (cities[cityPart]) {
    return cities[cityPart];
  }
  
  // Default to Cairo if city not found
  console.log(`Could not find coordinates for ${cityName}, using default`);
  return { lat: 30.0444, lon: 31.2357 };
};

// Calculate natal chart based on birth details
export const calculateNatalChart = async (
  userId: string,
  birthDate: string, 
  birthTime: string = "", 
  birthPlace: string = ""
): Promise<any> => {
  try {
    const coords = getCityCoordinates(birthPlace);
    console.log(`Fetching chart data from API for: ${birthDate} ${birthTime} ${birthPlace}`);

    // Step 1: Call natal-chart API to get Julian Day
    const natalChartPayload = {
      date: birthDate,
      time: birthTime || "12:00",
      lat: coords.lat,
      lon: coords.lon,
      timezone: "UTC"
    };
    
    console.log("Sending payload to natal-chart API:", JSON.stringify(natalChartPayload));
    
    const natalChartResponse = await fetch("https://astrohabibiapi-564958434402.me-central1.run.app/natal-chart", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(natalChartPayload)
    });
    
    if (!natalChartResponse.ok) {
      throw new Error(`Natal chart API responded with ${natalChartResponse.status}`);
    }
    
    const natalChartData = await natalChartResponse.json();
    console.log("natal-chart API response:", JSON.stringify(natalChartData));
    
    const julianDay = natalChartData.julianDay;
    console.log("VERIFICATION - Using exact Julian Day from API:", julianDay);
    
    // Only proceed with full chart if birth time is provided
    if (!birthTime) {
      return {
        julianDay,
        timestamp: natalChartData.timestamp,
        coordinates: {
          latitude: coords.lat,
          longitude: coords.lon
        },
        hasBirthTime: false
      };
    }
    
    // Step 2: Call full-chart API with the Julian Day
    const fullChartPayload = {
      julianDay: julianDay,
      lat: coords.lat,
      lon: coords.lon
    };
    
    console.log("Sending payload to full-chart API:", JSON.stringify(fullChartPayload));
    
    const fullChartResponse = await fetch("https://astrohabibiapi-564958434402.me-central1.run.app/full-chart", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(fullChartPayload)
    });
    
    if (!fullChartResponse.ok) {
      throw new Error(`Full chart API responded with ${fullChartResponse.status}`);
    }
    
    const fullChartData = await fullChartResponse.json();
    console.log("full-chart API response:", JSON.stringify(fullChartData));
    
    return {
      ...fullChartData,
      julianDay,
      timestamp: natalChartData.timestamp,
      coordinates: {
        latitude: coords.lat,
        longitude: coords.lon
      },
      hasBirthTime: true
    };
    
  } catch (error) {
    console.error("Error fetching natal chart:", error);
    throw error;
  }
};

export const generateBirthChartInterpretation = (chart: any, hasBirthTime: boolean): string => {
  try {
    // Comprehensive interpretation logic using EXACT API data
    let interpretation = `โจ ุชุญููู ุฎุฑูุทุชู ุงูููููุฉ ุงูุดุงููุฉ โจ\n\n`;

    // Sun Sign Interpretation
    const sunSign = chart.planets.Sun.sign;
    interpretation += `โ๏ธ ุงูุดูุณ ูู ุจุฑุฌ ${sunSign}:\n`;
    interpretation += getSunSignInterpretation(sunSign) + "\n\n";

    // Moon Sign Interpretation
    const moonSign = chart.planets.Moon.sign;
    interpretation += `๐ ุงูููุฑ ูู ุจุฑุฌ ${moonSign}:\n`;
    interpretation += getMoonSignInterpretation(moonSign) + "\n\n";

    // Mercury Sign Interpretation
    const mercurySign = chart.planets.Mercury.sign;
    const mercuryRetrograde = chart.planets.Mercury.retrograde;
    interpretation += `โฟ๏ธ ุนุทุงุฑุฏ ูู ุจุฑุฌ ${mercurySign} ${mercuryRetrograde ? "(ุชุฑุงุฌุน)" : ""}:\n`;
    interpretation += getMercurySignInterpretation(mercurySign, mercuryRetrograde) + "\n\n";

    // Venus Sign Interpretation
    const venusSign = chart.planets.Venus.sign;
    const venusRetrograde = chart.planets.Venus.retrograde;
    interpretation += `โ๏ธ ุงูุฒูุฑุฉ ูู ุจุฑุฌ ${venusSign} ${venusRetrograde ? "(ุชุฑุงุฌุน)" : ""}:\n`;
    interpretation += getVenusSignInterpretation(venusSign, venusRetrograde) + "\n\n";

    // Mars Sign Interpretation
    const marsSign = chart.planets.Mars.sign;
    const marsRetrograde = chart.planets.Mars.retrograde;
    interpretation += `โ๏ธ ุงููุฑูุฎ ูู ุจุฑุฌ ${marsSign} ${marsRetrograde ? "(ุชุฑุงุฌุน)" : ""}:\n`;
    interpretation += getMarsSignInterpretation(marsSign, marsRetrograde) + "\n\n";

    // Ascendant Interpretation (if birth time available)
    if (hasBirthTime) {
      const ascendantSign = chart.ascendant.sign;
      interpretation += `๐ ุงูุทุงูุน ูู ุจุฑุฌ ${ascendantSign}:\n`;
      interpretation += getAscendantSignInterpretation(ascendantSign) + "\n\n";
    } else {
      interpretation += "๐ ููุงุญุธุฉ: ูู ูุชู ุชูููุฑ ููุช ุงููููุงุฏุ ูุฐุง ูุง ูููู ุญุณุงุจ ุงูุทุงูุน ุจุฏูุฉ.\n\n";
    }

    return interpretation;
  } catch (error) {
    console.error("Error generating birth chart interpretation:", error);
    return "ุนุฐุฑูุงุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูููุฏ ุงูุชูุณูุฑ ุงููููู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.";
  }
};

// Detailed interpretation functions for each planet sign
const getSunSignInterpretation = (sign: string): string => {
  // Comprehensive interpretations for each sign
  const interpretations: Record<string, string> = {
    "Libra": "ุชุชููุฒ ุจุดุฎุตูุฉ ูุชูุงุฒูุฉ ูุฏูุจูููุงุณูุฉุ ุชุณุนู ุฏุงุฆูุงู ููุนุฏุงูุฉ ูุงูุชูุงุบู ูู ุญูุงุชู. ูุฏูู ุญุณ ููู ูุชุทูุฑ ููุฏุฑุฉ ุนูู ุฑุคูุฉ ูุฌูุงุช ุงููุธุฑ ุงููุฎุชููุฉ. ุชููู ููุชุนุงูู ูุงูุดุฑุงูุงุช ุงููุชูุงุฒูุฉุ ูุชุฌุฏ ุณุนุงุฏุชู ูู ุฎูู ุชูุงุฒู ูู ุงูุนูุงูุงุช ูุงูููุงูู.",
    "Aries": "ุชุชููุฒ ุจุงูุดุฌุงุนุฉ ูุงูุงูุฏูุงุนุ ูุชุญุจ ุฃู ุชููู ูู ุงูููุฏูุฉ. ุฃูุช ูุงุฆุฏ ุจุงููุทุฑุฉ ููุชุญูุณ ููู ูุง ูู ุฌุฏูุฏ.",
    "Taurus": "ุชุชููุฒ ุจุงูุตุจุฑ ูุงูุซุจุงุชุ ูุชูุฏุฑ ุงูุฌูุงู ูุงูุฑุงุญุฉ. ุฃูุช ุดุฎุต ุนููู ูููุซูู.",
    "Gemini": "ุชุชููุฒ ุจุงูุฐูุงุก ูุงููุถููุ ูุชุญุจ ุงูุชูุงุตู ูุงูุชุนูู. ุฃูุช ุดุฎุต ุงุฌุชูุงุนู ููุชุนุฏุฏ ุงูููุงูุจ.",
    "Cancer": "ุชุชููุฒ ุจุงูุนุงุทูุฉ ูุงูุญุณุงุณูุฉุ ูุชุญุจ ุงูุนุงุฆูุฉ ูุงูููุฒู. ุฃูุช ุดุฎุต ููู ูููุชู ุจุงูุขุฎุฑูู.",
    "Leo": "ุชุชููุฒ ุจุงููุฑู ูุงูุฅุจุฏุงุนุ ูุชุญุจ ุฃู ุชููู ูุญุท ุงูุฃูุธุงุฑ. ุฃูุช ุดุฎุต ูุงุซู ููุญุจ ููุญูุงุฉ.",
    "Virgo": "ุชุชููุฒ ุจุงูุฏูุฉ ูุงูุชุญูููุ ูุชุญุจ ุงููุธุงู ูุงูุชุฑุชูุจ. ุฃูุช ุดุฎุต ุนููู ูููุธู.",
    "Scorpio": "ุชุชููุฒ ุจุงูููุฉ ูุงูุนุฒููุฉุ ูุชุญุจ ุงูุบููุถ ูุงูุชุญูู. ุฃูุช ุดุฎุต ุดุบูู ููุฎูุต.",
    "Sagittarius": "ุชุชููุฒ ุจุงูุชูุงุคู ูุงููุบุงูุฑุฉุ ูุชุญุจ ุงูุณูุฑ ูุงูุงุณุชูุดุงู. ุฃูุช ุดุฎุต ุญุฑ ููุณุชูู.",
    "Capricorn": "ุชุชููุฒ ุจุงูุทููุญ ูุงููุณุคูููุฉุ ูุชุญุจ ุงููุฌุงุญ ูุงูุชูุฏูุฑ. ุฃูุช ุดุฎุต ุฌุงุฏ ููุฌุชูุฏ.",
    "Aquarius": "ุชุชููุฒ ุจุงูุงุจุชูุงุฑ ูุงูุงุณุชููุงููุฉุ ูุชุญุจ ุงูุชุบููุฑ ูุงูุชุฌุฏูุฏ. ุฃูุช ุดุฎุต ูุฑูุฏ ููููุฑ.",
    "Pisces": "ุชุชููุฒ ุจุงูุฑุญูุฉ ูุงูุฎูุงูุ ูุชุญุจ ุงููู ูุงูุฑูุญุงููุฉ. ุฃูุช ุดุฎุต ุญุณุงุณ ููุชุนุงุทู."
  };
  
  return interpretations[sign] || "ูู ูุชู ุงูุนุซูุฑ ุนูู ุชูุณูุฑ ูุญุฏุฏ ููุฐุง ุงูุจุฑุฌ.";
};

const getMoonSignInterpretation = (sign: string): string => {
  const interpretations: Record<string, string> = {
    "Libra": "ุชุญุชุงุฌ ุฅูู ุงูุชูุงุฒู ูุงูุงูุณุฌุงู ูู ุญูุงุชู ุงูุนุงุทููุฉ. ุชุณุนู ููุนูุงูุงุช ุงููุชูุงุฒูุฉ ูุชูุฑู ุงูุตุฑุงุนุงุช.",
    "Aries": "ุชุนุจุฑ ุนู ูุดุงุนุฑู ุจุตุฏู ูุงูุฏูุงุน. ุชุญุชุงุฌ ุฅูู ูุณุงุญุฉ ุญุฑุฉ ููุชุนุจูุฑ ุนู ููุณู.",
    "Taurus": "ุชุจุญุซ ุนู ุงูุงุณุชูุฑุงุฑ ูุงูุฃูุงู ูู ุนูุงูุงุชู. ุชูุฏุฑ ุงููุญุธุงุช ุงููุงุฏุฆุฉ ูุงููุฑูุญุฉ.",
    "Gemini": "ุชุญุชุงุฌ ุฅูู ุงูุชุญููุฒ ุงูููุฑู ูุงูุชูุงุตู ูู ุนูุงูุงุชู. ุชุญุจ ุงูุชููุน ูุงูุชุฌุฏูุฏ.",
    "Cancer": "ุชุนุชูู ุจูู ุญููู ูุชุญุชุงุฌ ุฅูู ุงูุดุนูุฑ ุจุงูุฃูุงู ูุงูุญูุงูุฉ. ุชูุฏุฑ ุงูุนุงุฆูุฉ ูุงูุชูุงููุฏ.",
    "Leo": "ุชุญุจ ุฃู ุชููู ูุญุท ุงูุชูุงู ูุชูุฏูุฑ ูู ุนูุงูุงุชู. ุชุนุจุฑ ุนู ูุดุงุนุฑู ุจุญูุงุณ ููุฑู.",
    "Virgo": "ุชุญุชุงุฌ ุฅูู ุงููุธุงู ูุงูุชุฑุชูุจ ูู ุญูุงุชู ุงูุนุงุทููุฉ. ุชุนุจุฑ ุนู ุญุจู ุจุงูุฎุฏูุฉ ูุงูุงูุชูุงู ุจุงูุชูุงุตูู.",
    "Scorpio": "ุชุนูุด ูุดุงุนุฑู ุจุนูู ูุดุบู. ุชุญุชุงุฌ ุฅูู ุนูุงูุงุช ุตุงุฏูุฉ ููุฎูุตุฉ.",
    "Sagittarius": "ุชุญุชุงุฌ ุฅูู ุงูุญุฑูุฉ ูุงููุบุงูุฑุฉ ูู ุนูุงูุงุชู. ุชุญุจ ุงุณุชูุดุงู ุขูุงู ุฌุฏูุฏุฉ.",
    "Capricorn": "ุชุฃุฎุฐ ุนูุงูุงุชู ุจุฌุฏูุฉ ููุณุคูููุฉ. ุชุจุญุซ ุนู ุงูุงุณุชูุฑุงุฑ ูุงูุงูุชุฒุงู ุนูู ุงููุฏู ุงูุทููู.",
    "Aquarius": "ุชุญุชุงุฌ ุฅูู ูุณุงุญุฉ ุดุฎุตูุฉ ูุงุณุชููุงููุฉ ูู ุนูุงูุงุชู. ุชูุฏุฑ ุงูุตุฏุงูุฉ ูุงููุณุงูุงุฉ.",
    "Pisces": "ุชุชุนุงุทู ูุน ุงูุขุฎุฑูู ูุชุญุชุงุฌ ุฅูู ุนูุงูุงุช ุฑูุญูุฉ. ุชุญุจ ุงูุฃุญูุงู ูุงูุฎูุงู."
  };
  
  return interpretations[sign] || "ูู ูุชู ุงูุนุซูุฑ ุนูู ุชูุณูุฑ ูุญุฏุฏ ููุฐุง ุงูุจุฑุฌ.";
};

const getMercurySignInterpretation = (sign: string, retrograde: boolean): string => {
  const interpretations: Record<string, string> = {
    "Libra": "ุชุชูุงุตู ุจูุทู ูุฏุจูููุงุณูุฉุ ูุชุณุนู ููุนุฏุงูุฉ ูุงูุชูุงุฒู ูู ุฃููุงุฑู. ุชูุฏุฑ ุงูุญูุงุฑ ุงูุจูุงุก ูุงูุชุนุงูู.",
    "Aries": "ุชุนุจุฑ ุนู ุฃููุงุฑู ุจุฌุฑุฃุฉ ูุงูุฏูุงุน. ุฃูุช ูุจุงุดุฑ ูุตุฑูุญ ูู ููุงูู.",
    "Taurus": "ุชููุฑ ุจุชุฃูู ูุนูููุฉ. ุชุญุชุงุฌ ุฅูู ููุช ููุนุงูุฌุฉ ุงููุนูููุงุช ุงูุฌุฏูุฏุฉ.",
    "Gemini": "ุชุชูุงุตู ุจุฐูุงุก ููุถูู. ุชุญุจ ุชุจุงุฏู ุงูุฃููุงุฑ ูุงููุนูููุงุช.",
    "Cancer": "ุชููุฑ ุจุนุงุทูุฉ ูุญุฏุณ. ุชุชุฃุซุฑ ุฃููุงุฑู ุจูุดุงุนุฑู ูุฐูุฑูุงุชู.",
    "Leo": "ุชุนุจุฑ ุนู ุฃููุงุฑู ุจุซูุฉ ูุฅุจุฏุงุน. ุชุญุจ ุฃู ุชููู ูุณููุนุงู ููุคุซุฑุงู.",
    "Virgo": "ุชุญูู ุงููุนูููุงุช ุจุฏูุฉ ูุชูุชู ุจุงูุชูุงุตูู. ูุฏูู ุนูู ููุฏู ูููุธู.",
    "Scorpio": "ุชููุฑ ุจุนูู ูุชุจุญุซ ุนูุง ูู ูุฎูู. ูุฏูู ูุฏุฑุฉ ุนูู ูุดู ุงูุญูุงุฆู ูุงูุฃุณุฑุงุฑ.",
    "Sagittarius": "ุชููุฑ ุจุชูุงุคู ูููุณูุฉ. ุชุญุจ ุงุณุชูุดุงู ุฃููุงุฑ ุฌุฏูุฏุฉ.",
    "Capricorn": "ุชููุฑ ุจุทุฑููุฉ ููุธูุฉ ูุนูููุฉ. ุชููู ุงูุฃููุงุฑ ุจูุงุกู ุนูู ูุงุฆุฏุชูุง ุงููุงูุนูุฉ.",
    "Aquarius": "ุชููุฑ ุจุทุฑููุฉ ูุจุชูุฑุฉ ูุบูุฑ ุชูููุฏูุฉ. ุชุณุชูุชุน ุจุงูุฃููุงุฑ ุงูุซูุฑูุฉ ูุงููุณุชูุจููุฉ.",
    "Pisces": "ุชููุฑ ุจุฎูุงู ูุฅููุงู. ูุฏ ุชุฌุฏ ุตุนูุจุฉ ูู ุงูุชุนุจูุฑ ุนู ุฃููุงุฑู ุจูุถูุญ ุฏุงุฆูุงู."
  };
  
  let interpretation = interpretations[sign] || "ูู ูุชู ุงูุนุซูุฑ ุนูู ุชูุณูุฑ ูุญุฏุฏ ููุฐุง ุงูุจุฑุฌ.";
  if (retrograde) {
    interpretation += " ูุฏ ุชูุงุฌู ุจุนุถ ุงูุชุฃุฎูุฑ ุฃู ุงูุชุญุฏูุงุช ูู ุงูุชูุงุตู ูุงูุชุนุจูุฑ ุนู ุฃููุงุฑู.";
  }
  return interpretation;
};

const getVenusSignInterpretation = (sign: string, retrograde: boolean): string => {
  const interpretations: Record<string, string> = {
    "Libra": "ุชุญุจ ุงูุฌูุงู ูุงูุชูุงุบู ูู ุนูุงูุงุชู. ุชุณุนู ููุนุฏุงูุฉ ูุงูุฅูุตุงู ูู ุงูุญุจ.",
    "Aries": "ุชุญุจ ุงููุบุงูุฑุฉ ูุงูุฅุซุงุฑุฉ ูู ุงูุญุจ. ุชูุฌุฐุจ ุฅูู ุงูุดุฑูุงุก ุงููุงุซููู ูุงููุณุชูููู.",
    "Taurus": "ุชุญุจ ุงูุฑุงุญุฉ ูุงูุงุณุชูุฑุงุฑ ูู ุงูุญุจ. ุชูุฏุฑ ุงููุญุธุงุช ุงููุงุฏุฆุฉ ูุงูููุชุนุฉ ูุน ุดุฑููู.",
    "Gemini": "ุชุญุชุงุฌ ุฅูู ุงูุชุญููุฒ ุงูููุฑู ูุงูุชูุงุตู ูู ุงูุญุจ. ุชูุฌุฐุจ ุฅูู ุงูุดุฑูุงุก ุงูุฃุฐููุงุก ูุงูุงุฌุชูุงุนููู.",
    "Cancer": "ุชุญุจ ุงูุฑุนุงูุฉ ูุงูุญูุงูุฉ ูู ุงูุญุจ. ุชูุฏุฑ ุงูุนุงุฆูุฉ ูุงูููุฒู.",
    "Leo": "ุชุญุจ ุงูุฅุนุฌุงุจ ูุงูุชูุฏูุฑ ูู ุงูุญุจ. ุชูุฌุฐุจ ุฅูู ุงูุดุฑูุงุก ุงูุฐูู ูุธูุฑูู ูู ุงูุงูุชูุงู.",
    "Virgo": "ุชุญุจ ุงูุฎุฏูุฉ ูุงูุงูุชูุงู ุจุงูุชูุงุตูู ูู ุงูุญุจ. ุชูุฏุฑ ุงูุดุฑูุงุก ุงูุนููููู ูุงูููุธููู.",
    "Scorpio": "ุชุญุจ ุงูุดุบู ูุงูุนูู ูู ุงูุญุจ. ุชูุฌุฐุจ ุฅูู ุงูุดุฑูุงุก ุงููุฎูุตูู ูุงููุชุญูุณูู.",
    "Sagittarius": "ุชุญุจ ุงูุญุฑูุฉ ูุงููุบุงูุฑุฉ ูู ุงูุญุจ. ุชูุฌุฐุจ ุฅูู ุงูุดุฑูุงุก ุงูุฐูู ูุดุงุฑูููู ุญุจ ุงูุงุณุชูุดุงู.",
    "Capricorn": "ุชุญุจ ุงูุงูุชุฒุงู ูุงููุณุคูููุฉ ูู ุงูุญุจ. ุชูุฏุฑ ุงูุดุฑูุงุก ุงูุฌุงุฏูู ูุงููุฌุชูุฏูู.",
    "Aquarius": "ุชุญุจ ุงูุตุฏุงูุฉ ูุงูุงุณุชููุงููุฉ ูู ุงูุญุจ. ุชูุฌุฐุจ ุฅูู ุงูุดุฑูุงุก ุงููุฑูุฏูู ูุงููุจุชูุฑูู.",
    "Pisces": "ุชุญุจ ุงูุฑููุงูุณูุฉ ูุงูุฎูุงู ูู ุงูุญุจ. ุชูุฌุฐุจ ุฅูู ุงูุดุฑูุงุก ุงูุญุณุงุณูู ูุงููุชุนุงุทููู."
  };
  
  let interpretation = interpretations[sign] || "ูู ูุชู ุงูุนุซูุฑ ุนูู ุชูุณูุฑ ูุญุฏุฏ ููุฐุง ุงูุจุฑุฌ.";
  if (retrograde) {
    interpretation += " ูุฏ ุชูุงุฌู ุจุนุถ ุงูุชุญุฏูุงุช ูู ุงูุนูุงูุงุช ุฃู ุตุนูุจุฉ ูู ุงูุชุนุจูุฑ ุนู ูุดุงุนุฑู.";
  }
  return interpretation;
};

const getMarsSignInterpretation = (sign: string, retrograde: boolean): string => {
  const interpretations: Record<string, string> = {
    "Libra": "ุชุชุตุฑู ุจุฏุจูููุงุณูุฉ ูุชูุงุฒูุ ูุชุณุนู ููุนุฏุงูุฉ ูุงูุงูุณุฌุงู ูู ุฃูุนุงูู. ูุฏ ุชุชุฑุฏุฏ ูุจู ุงุชุฎุงุฐ ุงููุฑุงุฑุงุช ุงูุญุงุณูุฉ.",
    "Aries": "ุชุชุตุฑู ุจุดุฌุงุนุฉ ูุงูุฏูุงุนุ ูุชุจุงุฏุฑ ุจููุฉ ูุชุญููู ูุง ุชุฑูุฏ. ูุฏ ุชููู ูุชููุฑุงู ุฃุญูุงูุงู.",
    "Taurus": "ุชุชุตุฑู ุจุซุจุงุช ูุตุจุฑุ ูุชุนูู ุจุฌุฏ ูุชุญููู ุฃูุฏุงูู ุงููุงุฏูุฉ. ูุฏ ุชููู ุนููุฏุงู ูู ุจุนุถ ุงูุฃุญูุงู.",
    "Gemini": "ุชุชุตุฑู ุจุฐูุงุก ูุณุฑุนุฉุ ูุชุณุชุฎุฏู ูุฏุฑุชู ุนูู ุงูุชูุงุตู ูุชุญููู ูุง ุชุฑูุฏ. ูุฏ ุชููู ูุชููุจุงู ูู ุงูุชูุงูุงุชู.",
    "Cancer": "ุชุชุตุฑู ุจุนุงุทูุฉ ูุญุฏุณุ ูุชุฏุงูุน ุจููุฉ ุนู ูู ุชุญุจ ููุง ุชุคูู ุจู. ูุฏ ุชููู ุญุณุงุณุงู ุฌุฏุงู.",
    "Leo": "ุชุชุตุฑู ุจุซูุฉ ูุฅุจุฏุงุนุ ูุชุณุนู ููุงุนุชุฑุงู ุจุฅูุฌุงุฒุงุชู. ูุฏ ุชููู ูุชุทูุจุงู ููุงูุชูุงู.",
    "Virgo": "ุชุชุตุฑู ุจุฏูุฉ ูููุงุกุฉุ ูุชูุชู ุจุงูุชูุงุตูู. ูุฏ ุชููู ูุงูุฏุงู ูููุณู ูููุขุฎุฑูู.",
    "Scorpio": "ุชุชุตุฑู ุจุนูู ูุชุตูููุ ููุฏูู ูุฏุฑุฉ ูุงุฆูุฉ ุนูู ุงูุชุฑููุฒ ูุชุญููู ุฃูุฏุงูู. ูุฏ ุชููู ุบุงูุถุงู ููุณูุทุฑุงู.",
    "Sagittarius": "ุชุชุตุฑู ุจุชูุงุคู ููุบุงูุฑุฉุ ูุชุจุญุซ ุนู ุชูุณูุน ุขูุงูู ูุฎุจุฑุงุชู ุจุงุณุชูุฑุงุฑ. ูุฏ ุชููู ููุฑุทุงู ูู ุงูุชูุงุคู.",
    "Capricorn": "ุชุชุตุฑู ุจุฌุฏูุฉ ููุณุคูููุฉุ ูุชุถุน ุฎุทุทุงู ุทูููุฉ ุงููุฏู ูุชูุชุฒู ุจูุง. ูุฏ ุชููู ูุชุญูุธุงู ุฌุฏุงู.",
    "Aquarius": "ุชุชุตุฑู ุจุทุฑู ุบูุฑ ุชูููุฏูุฉุ ูุชุฏุงูุน ุนู ุขุฑุงุฆู ุงููุณุชููุฉ ูุฃููุงุฑู ุงููุจุชูุฑุฉ. ูุฏ ุชููู ูุชูุฑุฏุงู.",
    "Pisces": "ุชุชุตุฑู ุจูุงุกู ุนูู ุญุฏุณู ูุฅููุงููุ ููุฏ ุชููู ูุชุฑุฏุฏุงู ุฃุญูุงูุงู ูู ุงูููุงูู ุงูุชู ุชุชุทูุจ ุญุณูุงู. ูุฏ ุชููู ูุซุงููุงู ุฌุฏุงู."
  };
  
  let interpretation = interpretations[sign] || "ูู ูุชู ุงูุนุซูุฑ ุนูู ุชูุณูุฑ ูุญุฏุฏ ููุฐุง ุงูุจุฑุฌ.";
  if (retrograde) {
    interpretation += " ูุฏ ุชูุงุฌู ุจุนุถ ุงูุฅุญุจุงุท ุฃู ุงูุชุฃุฎูุฑ ูู ุชุญููู ุฃูุฏุงูู.";
  }
  return interpretation;
};

const getAscendantSignInterpretation = (sign: string): string => {
  const interpretations: Record<string, string> = {
    "Libra": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ุฏุจูููุงุณู ููุทูู ูููุตู. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ุงุฌุชูุงุนูุงู ูุณุนู ููุชูุงุฒู ูุงูุงูุณุฌุงู.",
    "Aries": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ูุจุงุฏุฑ ูุฌุฑูุก ููุณุชูู. ูุฑุงู ุงููุงุณ ููุนูุงู ุจุงูุทุงูุฉ ูุงูุญูุงุณ.",
    "Taurus": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ูุณุชูุฑ ูููุซูู ูุนููู. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ุฌุฏูุฑุงู ุจุงูุซูุฉ.",
    "Gemini": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ุฐูู ููุถููู ูุงุฌุชูุงุนู. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ูุฑุญุงู ููุซูุฑุงู ููุงูุชูุงู.",
    "Cancer": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ุญุณุงุณ ูุฑุงุนู ูุนุงุทูู. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ุฏุงูุฆุงู ููุฏูุฏุงู.",
    "Leo": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ูุงุซู ููุฑูู ููุจุฏุน. ูุฑุงู ุงููุงุณ ูุงุฆุฏุงู ุทุจูุนูุงู.",
    "Virgo": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ููุธู ูุฏููู ููููุฏ. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ุนูููุงู ูููุซููุงู.",
    "Scorpio": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ุบุงูุถ ูุนููู ูููุซู. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ูููุงู ููุณูุทุฑุงู.",
    "Sagittarius": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ูุชูุงุฆู ููุบุงูุฑ ูุตุฑูุญ. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ูููุชุญุงู ููุณุชููุงู.",
    "Capricorn": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ุฌุฏู ููุณุคูู ูุทููุญ. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ุฌุฏูุฑุงู ุจุงูุงุญุชุฑุงู.",
    "Aquarius": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ูุณุชูู ููุฑูุฏ ููุจุชูุฑ. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ุบูุฑ ุชูููุฏู.",
    "Pisces": "ุชุธูุฑ ููุนุงูู ูุดุฎุต ุญุณุงุณ ูุญุงูู ููุชุนุงุทู. ูุฑุงู ุงููุงุณ ุดุฎุตุงู ุฑูุญุงููุงู ููุทููุงู."
  };
  
  return interpretations[sign] || "ูู ูุชู ุงูุนุซูุฑ ุนูู ุชูุณูุฑ ูุญุฏุฏ ููุฐุง ุงูุจุฑุฌ.";
};
// Similar detailed functions for Moon, Mercury, Venus, Mars, and Ascendant...
